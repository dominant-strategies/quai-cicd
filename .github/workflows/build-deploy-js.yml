name: Build and Deploy sub-action js
on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      update_version_command:
        required: false
        type: string
        default: npm version patch
      rails:
        required: false
        type: string
        default: echo "continuing."
      branch:
        required: false
        type: string
        default: ${{ github.ref }}
      update_version:
        required: true
        type: boolean
        default: true
      cloud_deploy:
        required: true
        type: boolean
        default: false
      needs_build:
        required: true
        type: boolean
      needs_export:
        required: false
        type: boolean
      install_command:
        required: false
        type: string
      skip_deploy:
        required: false
        type: boolean
        default: false
      name_override:
        required: false
        type: string
      gcp_project_id:
        required: false
        type: string
      token_secret_name:
        required: false
        type: string
      needs_docker:
        required: true
        type: boolean
        default: false
      build_command:
        required: false
        type: string
        default: npm run build
      include_chart:
        required: false
        type: boolean
        default: true
      needs_docker_compose:
        required: false
        type: boolean
        default: false

    secrets:
      GH_PAT:
        description: 'needed for github login'
        required: true
      DOCKER:
        description: 'needed for registry login'
        required: false
      KUBE_CONFIG:
        description: 'needed for kube setup'
        required: false
      BUILD_ARGS:
        description: 'needed for build args'
        required: false
      DOCKER_BUILD_ARGS:
          description: 'needed for docker build args'
          required: false
      GPG_PRIVATE_KEY:
        description: 'needed for gpg key'
        required: true
      GPG_KEY_ID:
        description: 'needed for gpg key'
        required: true
      GH_GCP_TOKEN:
        description: 'needed for gcp login'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Import GPG Key
        if: ${{ inputs.update_version }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true
          
          # Configure Git with CI account details
          git config --global user.name "ci-dominantstrategies"
          git config --global user.email "ci@dominantstrategies.io"
      
          # Optionally, check that the GPG key is correctly configured for signing
          gpg --list-keys "ci@dominantstrategies.io"

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GH_PAT }}" > ~/.ssh/id_key
          chmod 600 ~/.ssh/id_key
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "Host github.com\n  IdentityFile ~/.ssh/id_key\n  StrictHostKeyChecking no" > ~/.ssh/config
          chmod 644 ~/.ssh/config

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV
        

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Install Volta
        run: |
          curl -sSLf https://get.volta.sh | bash
          echo "$HOME/.volta/bin" >> $GITHUB_PATH

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: Install yq
        run: sudo snap install yq

      - name: get Version
        run: |
          VERSION_VALUE=$(sudo yq eval '.version' package.json | head -n 1)
          echo "VERSION=$VERSION_VALUE"
          echo "VERSION=$VERSION_VALUE" >> $GITHUB_ENV

      - name: Sanity Check Branch
        run: ${{ inputs.rails }}

      - name: Sync Chart.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Sync values.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Set up Docker Compose
        if: ${{ inputs.needs_docker_compose }}
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Install Dependencies
        if: ${{ inputs.install_command }}
        run: ${{ inputs.install_command }}

      - name: Build
        if: ${{ inputs.needs_build }}
        run: |
          if [ -n "${{ secrets.BUILD_ARGS }}" ]; then
            BUILD_ARGS=""
            # Replace ,, with a unique placeholder __COMMA__
            BUILD_ARGS_MODIFIED=$(echo "${{ secrets.BUILD_ARGS }}" | sed 's/,,/__COMMA__/g')
          
            # Change IFS to split on single commas
            OLD_IFS=$IFS
            IFS=','
            read -ra ARG_ARRAY <<< "$BUILD_ARGS_MODIFIED"
            IFS=$OLD_IFS
          
            for arg in "${ARG_ARRAY[@]}"; do
              # Replace placeholder __COMMA__ back to ,
              arg=$(echo "$arg" | sed 's/__COMMA__/,/g')
              BUILD_ARGS+=" $arg"
            done
          
            eval "$BUILD_ARGS ${{ inputs.build_command }}"
          else
            ${{ inputs.build_command }}
          fi

      - name: Export
        if: ${{ inputs.needs_export }}
        run: |
          if [ -n "${{ secrets.BUILD_ARGS }}" ]; then
            BUILD_ARGS=""
            OLD_IFS=$IFS
            IFS=','
            read -ra ARG_ARRAY <<< "${{ secrets.BUILD_ARGS }}"
            IFS=$OLD_IFS
            for arg in "${ARG_ARRAY[@]}"; do
                BUILD_ARGS+=" $arg"
            done
            eval "$BUILD_ARGS npm run export"
          else
            npm run export
          fi

      - name: Debug secrets
        run: |
          echo ${{ secrets.DOCKER }}

      - name: Login to Docker Hub
        if: ${{ inputs.needs_docker }}
        uses: docker/login-action@v2
        with:
          username: quaibuild
          password: ${{ secrets.DOCKER }}

      - name: Build Docker
        if: ${{ inputs.needs_docker }}
        run: |
          if [ -n "${{ secrets.DOCKER_BUILD_ARGS }}" ]; then
            BUILD_ARGS=""
            # Replace ,, with a unique placeholder __COMMA__
            DOCKER_BUILD_ARGS_MODIFIED=$(echo "${{ secrets.DOCKER_BUILD_ARGS }}" | sed 's/,,/__COMMA__/g')
          
            # Change IFS to split on single commas
            OLD_IFS=$IFS
            IFS=','
            read -ra ARG_ARRAY <<< "$DOCKER_BUILD_ARGS_MODIFIED"
            IFS=$OLD_IFS
          
            for arg in "${ARG_ARRAY[@]}"; do
              # Replace placeholder __COMMA__ back to ,
              arg=$(echo "$arg" | sed 's/__COMMA__/,/g')
              BUILD_ARGS+=" --build-arg $arg"
            done
          
            eval "docker build $BUILD_ARGS -t quainetwork/${{ env.REPO_NAME }}:${{ env.VERSION }} ."
          else
            docker build -t quainetwork/${{ env.REPO_NAME }}:${{ env.VERSION }} .
          fi


      - name: Push to Docker Hub
        if: ${{ inputs.needs_docker }}
        run: docker push quainetwork/${{ env.REPO_NAME }}:${{ env.VERSION }}

      - name: git tag
        if: ${{ inputs.update_version }}
        run: git tag ${{ env.VERSION }} && HUSKY=0 git push origin tag ${{ env.VERSION }}

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ inputs.update_version }}
        with:
          branch: ${{ inputs.branch }}
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io
        env:
          HUSKY: 0

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Import GPG Key
        if: ${{ inputs.update_version }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true
          # Configure Git with CI account details
          git config --global user.name "ci-dominantstrategies"
          git config --global user.email "ci@dominantstrategies.io"
          
          # Optionally, check that the GPG key is correctly configured for signing
          gpg --list-keys "ci@dominantstrategies.io"

      - name: Authenticate to Google Cloud
        if: ${{ !inputs.skip_deploy && inputs.gcp_project_id != '' && inputs.token_secret_name != '' }}
        uses: google-github-actions/auth@v0.4.0  # Use the latest version available
        with:
          credentials_json: ${{ secrets.GH_GCP_TOKEN }}

      - name: Setup Cloud SDK
        if: ${{ !inputs.skip_deploy && inputs.gcp_project_id != '' && inputs.token_secret_name != '' }}
        uses: google-github-actions/setup-gcloud@v2.0.0

      - name: Access Secret from Secret Manager
        if: ${{ !inputs.skip_deploy && inputs.gcp_project_id != '' && inputs.token_secret_name != '' }}
        run: |
          SECRET_NAME="${{ inputs.token_secret_name }}"  # The name of your secret in Secret Manager
          PROJECT_ID="${{ inputs.gcp_project_id }}"    # Your GCP project ID
          # Retrieve the secret value
          SECRET_VALUE=$(gcloud secrets versions access latest --secret="${SECRET_NAME}" --project="${PROJECT_ID}")
          # set the secret value as an environment variable
          echo "TOKEN=$SECRET_VALUE" >> $GITHUB_ENV

      - name: Install jq
        if: ${{ inputs.update_version }}
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV


      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV


      - name: Install Volta
        run: |
          curl -sSLf https://get.volta.sh | bash
          echo "$HOME/.volta/bin" >> $GITHUB_PATH

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: Debug deploy config
        run: |
          echo cloud_deploy: ${{ inputs.cloud_deploy }}
          echo skip_deploy: ${{ inputs.skip_deploy }}
          echo env: ${{ inputs.env }}

      - name: Prepare KUBE_CONFIG
        id: prepare_kubeconfig
        if: ${{ !inputs.skip_deploy && inputs.cloud_deploy }}
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > ${{ github.workspace }}/kubeconfig
          if [ -n "${{ env.TOKEN }}" ]; then
            sed -i 's|token:.*|token: ${{ env.TOKEN }}|' ${{ github.workspace }}/kubeconfig
          fi
          ## set kubeconfig contents to env variable in gh
          KUBECONFIG_CONTENT=$(cat ${{ github.workspace }}/kubeconfig)
          echo "KUBECONFIG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$KUBECONFIG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: Deploy to cloud
        uses: WyriHaximus/github-action-helm3@v3
        if: ${{ inputs.cloud_deploy && !inputs.skip_deploy }}
        id: deploy
        continue-on-error: true
        with:
          exec: helm upgrade ${{ env.REPO_NAME }} ./helm --install --namespace=${{ inputs.env }} --values=./helm/env/${{ inputs.env }}.values.yaml
          kubeconfig: ${{ env.KUBECONFIG_CONTENT }}

      - name: Deploy to local from bastion
        if: ${{ !inputs.cloud_deploy && !inputs.skip_deploy }}
        continue-on-error: true
        run: |
          echo installing kubectl...
          curl -LO "https://dl.k8s.io/release/v1.25.9/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          echo kubectl installed
          echo setting kubeconfig...
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          if [ -n "${{ env.TOKEN }}" ]; then
            sed -i 's|token:.*|token: ${{ env.TOKEN }}|' kubeconfig.yaml
          fi
          export KUBECONFIG=kubeconfig.yaml
          echo kubeconfig set
          echo testing kubectl connection...
          kubectl get po
          echo clearing bastion helm
          kubectl exec -it $(kubectl get po -n kube-system -l app=bastion -o jsonpath="{.items[0].metadata.name}") -n kube-system -- rm -rf helm
          echo bastion helm cleared
          echo copying helm to bastion...
          kubectl cp -n kube-system ./helm $(kubectl get po -n kube-system -l app=bastion -o jsonpath="{.items[0].metadata.name}"):/helm
          echo helm chart copied to bastion
          echo deploying helm chart from bastion...
          kubectl exec -it $(kubectl get po -n kube-system -l app=bastion -o jsonpath="{.items[0].metadata.name}") -n kube-system -- helm upgrade --install ${{ env.REPO_NAME }} ./helm --namespace=${{ inputs.env }} --values=./helm/env/${{ inputs.env }}.values.yaml 
          echo helm chart deployed!!!
          echo cleaning bastion
          kubectl exec -it $(kubectl get po -n kube-system -l app=bastion -o jsonpath="{.items[0].metadata.name}") -n kube-system -- rm -rf helm
          echo bastion helm cleared
          echo bastion cleaned up 

      - name: Install yq
        run: sudo snap install yq

      - name: install semver globally
        if: ${{ inputs.update_version }}
        run: npm install -g semver

      - name: Update Version
        if: ${{ inputs.update_version }}
        run: ${{ inputs.update_version_command }}

      - name: get Version
        run: |
          VERSION_VALUE=$(sudo yq eval '.version' package.json | head -n 1)
          echo "VERSION=$VERSION_VALUE"
          echo "VERSION=$VERSION_VALUE" >> $GITHUB_ENV

      - name: Update Chart.yaml version
        if: ${{ inputs.update_version && inputs.include_chart }}
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml
      - name: Update values.yaml version
        if: ${{ inputs.update_version && inputs.include_chart }}
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Update package-lock.json
        continue-on-error: true
        run: npm i --package-lock-only --ignore-scripts

      - name: rm kubeconfig
        continue-on-error: true
        run: rm ${{ github.workspace }}/kubeconfig

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ inputs.update_version }}
        with:
          branch: ${{ inputs.branch }}
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io
        env:
          HUSKY: 0
